{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Hacker/source/avatar.jpg","path":"avatar.jpg","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/base/normalize.css","path":"css/base/normalize.css","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/archive.styl","path":"css/components/archive.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/article.styl","path":"css/components/article.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/categories.styl","path":"css/components/categories.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/footer.styl","path":"css/components/footer.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/header.styl","path":"css/components/header.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/icon.styl","path":"css/components/icon.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/layout.styl","path":"css/components/layout.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/pagination.styl","path":"css/components/pagination.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/responsive.styl","path":"css/components/responsive.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/syntax.styl","path":"css/components/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/tags.styl","path":"css/components/tags.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/avatar.png","path":"avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1491324316000},{"_id":"themes/Hacker/.DS_Store","hash":"61d4653525ee800306d888d998f91174144e6d64","modified":1491324932000},{"_id":"themes/Hacker/LICENSE","hash":"3127907a7623734f830e8c69ccee03b693bf993e","modified":1490896045000},{"_id":"themes/Hacker/README.md","hash":"71077f7bdebc6e8d36f763e715ec2d55ddca4141","modified":1490896045000},{"_id":"themes/Hacker/README_zh-CN.md","hash":"d6c9200e96bb3633c3a84de169f91e6c34a5ea14","modified":1490896045000},{"_id":"themes/Hacker/_config.yml","hash":"112e6b984ea015972aba1b7f832475441ef85dcb","modified":1491669892000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1491324326000},{"_id":"source/_posts/HTML传值.md","hash":"4b27e0b94efb625bbd5bf302e0e2e34247bbf957","modified":1491670675000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1490725467000},{"_id":"source/_posts/三月码代码总结.md","hash":"7deeb7c2eafec84ec427c335e6040c70ecaf9109","modified":1491401374000},{"_id":"themes/Hacker/languages/default.yml","hash":"ef90548952b1f9cc88dbe9daad882786212aec38","modified":1490896045000},{"_id":"themes/Hacker/languages/zh-CN.yml","hash":"18638177b944e0deb4a8c26a1c4a980901151132","modified":1490896045000},{"_id":"themes/Hacker/layout/archive.ejs","hash":"2238cbe29009aafb16969d2c70dceb3f71772123","modified":1490896045000},{"_id":"themes/Hacker/layout/.DS_Store","hash":"c08e3427b7cae126fe16eeaf7e3d3d3be6e96e08","modified":1491324374000},{"_id":"themes/Hacker/layout/categories.ejs","hash":"bfad4e7eade650c535f0194974e2646619657b8b","modified":1490896045000},{"_id":"themes/Hacker/layout/index.ejs","hash":"1d2c487a95d25e763b5f7e004194eb6ee6b18135","modified":1490896045000},{"_id":"themes/Hacker/layout/layout.ejs","hash":"341e77b5f07457e4ccd69634f511da05a5d89f18","modified":1490896045000},{"_id":"themes/Hacker/layout/page.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1490896045000},{"_id":"themes/Hacker/layout/post.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1490896045000},{"_id":"themes/Hacker/layout/tags.ejs","hash":"ee89e6a9c14bdb5e5e8cf975a558c780fe8dabff","modified":1490896045000},{"_id":"themes/Hacker/source/avatar.jpg","hash":"13476a9eac6b9f3855d810731283a83684a19622","modified":1465569677000},{"_id":"themes/Hacker/layout/components/archive.ejs","hash":"4da8fe3cb94e8f11674bb6b774732c760c8cb7f3","modified":1491674499000},{"_id":"themes/Hacker/layout/components/article.ejs","hash":"5a08e05eb271589a2ed69fdd08516fa8457af3ed","modified":1490896045000},{"_id":"themes/Hacker/layout/components/categories.ejs","hash":"3665bf5d1c7181db22dc1c48d62ebf42757d8c27","modified":1490896045000},{"_id":"themes/Hacker/layout/components/comment.ejs","hash":"34b72f9819b5298be101f5c568cc7f2a52ab0f7d","modified":1490896045000},{"_id":"themes/Hacker/layout/components/footer.ejs","hash":"d2972bacae56d94f6de69cd9312d72d60ea0c33e","modified":1491322064000},{"_id":"themes/Hacker/layout/components/googleanalytics.ejs","hash":"fa11251ace0fc61cbcffb74f32fbf5bdbb201ff2","modified":1490896045000},{"_id":"themes/Hacker/layout/components/head.ejs","hash":"10475fdfc513c9380f18d034e15b3b051c8e9269","modified":1490896045000},{"_id":"themes/Hacker/layout/components/header.ejs","hash":"f17be15445d3d5e70a1e0aa4be94519d5266627d","modified":1491323295000},{"_id":"themes/Hacker/layout/components/pagination.ejs","hash":"4ab5e3b0239e467923a0f91c771bcc9ee7889cfe","modified":1490896045000},{"_id":"themes/Hacker/source/css/style.styl","hash":"208e5f6d010e4e2c5590dae5e4fca8de592d3ef1","modified":1490896045000},{"_id":"themes/Hacker/source/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1490896045000},{"_id":"themes/Hacker/source/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1490896045000},{"_id":"themes/Hacker/source/css/components/archive.styl","hash":"1ea85fb66cfb25156a97979c0b1107564d2c6ad4","modified":1491674757000},{"_id":"themes/Hacker/source/css/components/article.styl","hash":"e652fac743569f9bba0b6c57acafea41ec662db0","modified":1491399555000},{"_id":"themes/Hacker/source/css/components/categories.styl","hash":"c67e20d60351295cb178b568af42d430f4bcc3e6","modified":1490896045000},{"_id":"themes/Hacker/source/css/components/footer.styl","hash":"e3f1276d709c6bd0f7c66a92b8ffaf8c97823453","modified":1491322203000},{"_id":"themes/Hacker/source/css/components/header.styl","hash":"f89e11f4e29389c07a8e409c50c1c434ca56524f","modified":1491323358000},{"_id":"themes/Hacker/source/css/components/icon.styl","hash":"8da3ff5b6cd1609fdfe0c564d47391367abc8808","modified":1490896045000},{"_id":"themes/Hacker/source/css/components/layout.styl","hash":"73c1688b95b20cd67669bc5567420f5be8448c9f","modified":1490896045000},{"_id":"themes/Hacker/source/css/components/pagination.styl","hash":"86639291519af09e6eecb4eb17eb32099e7c69bc","modified":1491320211000},{"_id":"themes/Hacker/source/css/components/responsive.styl","hash":"053e7ec4c22845422440660b7e1d6b0dea5b4fbd","modified":1490896045000},{"_id":"themes/Hacker/source/css/components/syntax.styl","hash":"d11e3cb859b427cf9220fd10eeb223a4cbd33e6e","modified":1491320211000},{"_id":"themes/Hacker/source/css/components/tags.styl","hash":"3e6c22324ac03f50e40f96366bf38861f7d8cf25","modified":1491320211000},{"_id":"themes/Hacker/source/avatar.png","hash":"2ef5b6a9ccd654138ec795117b9d783cb8bacf40","modified":1491323276000},{"_id":"themes/Hacker/layout/components/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1490895048000},{"_id":"source/_posts/test2016-2.md","hash":"400f6c4a0da01f34d65d8e3b9909a9740a42b96d","modified":1491672691000},{"_id":"source/_posts/test2016.md","hash":"45716c93ed0fa7f71300a2700cf7e2ee3bfafc5a","modified":1491672665000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"HTML Form 传值","date":"2017-04-03T16:57:20.000Z","_content":"今天碰到一个 HTML 的问题，一个表单在提交后，到达 action 指向的页面后，在连接中所传递的值，都直接被删除了的问题。比如 `<form action=\"http://dest.com?id=1\" method=\"GET\"></form>`，这个表单在提交后，网页的链接为 `http://dest.com?` 而后面本来想要传递的值 `id = 1` 没了。\n\n以前在处理 form 的传值上，多数为 `POST` method, 直接用 `JS` 提取表格内输入的值，这种方式因为项目给的时候，用了这种方法，不想大改，就继续沿用。出现这个问题的原因是，在提交表单后，浏览器会自动用表单里面的内容生成新的 `key=value` 来替换掉原来问号后面的内容。\n\n正确的做法也挺简单，如下\n```\n<form action=\"http://dest.com?id=1\" method=\"GET\">\n    <input type=\"hidden\" name=\"id\" value=\"1\">\n</form>\n```\n这样就搞定了。\n\n更多例子和解释参照：http://stackoverflow.com/questions/1116019/submitting-a-get-form-with-query-string-params-and-hidden-params-disappear","source":"_posts/HTML传值.md","raw":"---\ntitle: HTML Form 传值\ndate: 2017-04-04 00:57:20\ntags:\n---\n今天碰到一个 HTML 的问题，一个表单在提交后，到达 action 指向的页面后，在连接中所传递的值，都直接被删除了的问题。比如 `<form action=\"http://dest.com?id=1\" method=\"GET\"></form>`，这个表单在提交后，网页的链接为 `http://dest.com?` 而后面本来想要传递的值 `id = 1` 没了。\n\n以前在处理 form 的传值上，多数为 `POST` method, 直接用 `JS` 提取表格内输入的值，这种方式因为项目给的时候，用了这种方法，不想大改，就继续沿用。出现这个问题的原因是，在提交表单后，浏览器会自动用表单里面的内容生成新的 `key=value` 来替换掉原来问号后面的内容。\n\n正确的做法也挺简单，如下\n```\n<form action=\"http://dest.com?id=1\" method=\"GET\">\n    <input type=\"hidden\" name=\"id\" value=\"1\">\n</form>\n```\n这样就搞定了。\n\n更多例子和解释参照：http://stackoverflow.com/questions/1116019/submitting-a-get-form-with-query-string-params-and-hidden-params-disappear","slug":"HTML传值","published":1,"updated":"2017-04-08T16:57:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj19i7ipb0000ezy9ez40sai0","content":"<p>今天碰到一个 HTML 的问题，一个表单在提交后，到达 action 指向的页面后，在连接中所传递的值，都直接被删除了的问题。比如 <code>&lt;form action=&quot;http://dest.com?id=1&quot; method=&quot;GET&quot;&gt;&lt;/form&gt;</code>，这个表单在提交后，网页的链接为 <code>http://dest.com?</code> 而后面本来想要传递的值 <code>id = 1</code> 没了。</p>\n<p>以前在处理 form 的传值上，多数为 <code>POST</code> method, 直接用 <code>JS</code> 提取表格内输入的值，这种方式因为项目给的时候，用了这种方法，不想大改，就继续沿用。出现这个问题的原因是，在提交表单后，浏览器会自动用表单里面的内容生成新的 <code>key=value</code> 来替换掉原来问号后面的内容。</p>\n<p>正确的做法也挺简单，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form action=&quot;http://dest.com?id=1&quot; method=&quot;GET&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;1&quot;&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>这样就搞定了。</p>\n<p>更多例子和解释参照：<a href=\"http://stackoverflow.com/questions/1116019/submitting-a-get-form-with-query-string-params-and-hidden-params-disappear\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/1116019/submitting-a-get-form-with-query-string-params-and-hidden-params-disappear</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天碰到一个 HTML 的问题，一个表单在提交后，到达 action 指向的页面后，在连接中所传递的值，都直接被删除了的问题。比如 <code>&lt;form action=&quot;http://dest.com?id=1&quot; method=&quot;GET&quot;&gt;&lt;/form&gt;</code>，这个表单在提交后，网页的链接为 <code>http://dest.com?</code> 而后面本来想要传递的值 <code>id = 1</code> 没了。</p>\n<p>以前在处理 form 的传值上，多数为 <code>POST</code> method, 直接用 <code>JS</code> 提取表格内输入的值，这种方式因为项目给的时候，用了这种方法，不想大改，就继续沿用。出现这个问题的原因是，在提交表单后，浏览器会自动用表单里面的内容生成新的 <code>key=value</code> 来替换掉原来问号后面的内容。</p>\n<p>正确的做法也挺简单，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form action=&quot;http://dest.com?id=1&quot; method=&quot;GET&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;1&quot;&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>这样就搞定了。</p>\n<p>更多例子和解释参照：<a href=\"http://stackoverflow.com/questions/1116019/submitting-a-get-form-with-query-string-params-and-hidden-params-disappear\">http://stackoverflow.com/questions/1116019/submitting-a-get-form-with-query-string-params-and-hidden-params-disappear</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-03-28T18:24:27.000Z","updated":"2017-03-28T18:24:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj19i7ipi0001ezy9bi3mab4r","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"三月码代码总结","date":"2017-04-05T13:26:09.000Z","_content":"从3月1日开始工作，到上周周五，第一份工作的第一个月在码代码的过程中完美度过。一个比较大的不足就是没有**每天写总结**，虽然公司有一个每天要写的 daily report，但基本是简单记录了一天里做了的事情，而不是做完这些事之后的心得体会，**没有深入反思，也就没有深刻的印象**。在这月终，必须对上个月进行一个整体的总结。\n\n这个月主要分成四个阶段：\n1.  Catch up assignment，主要是 `HTML & CSS`, `SQL`, `JavaScript`, `JQuery` 的练习，大部分是之前比较熟悉的内容，用了一天半，完成任务。\n2.  First assignment catalog，这是我们公司软件开发很重视的一点，用 catalog 的形式，思考设计好要软件，再进行开发。主要是从这几个方面去阐述：\n\t* 商业运作的场景\n\t* 运作过程中会碰到的问题\n\t* 用户名片（具体的中文名叫什么来着？）：\n\t\t* 用户是谁？\n\t\t* 用户完成任务的场景\n\t\t* 用户要完成什么任务？\n\t\t* 用户完成这项任务的期待是什么样的？\n\t\t* 这个软件能够如何帮助用户完成任务？\n\t* 在使用软件的理想情况下，商业运作的场景会是什么样的？\n\t* 软件有哪些功能？\n\t* 软件能带来哪些好处？\n\t* 针对每个好处罗列具体的功能，以及每个功能所能带来的好处。\n\t\n\t这部分的内容，有点像是之前 IS3102 Enterprise Systems Development Project 要求写的 report 的一部分内容，但是像是**产品经理做的用户需求分析**，一直对产品经理很感兴趣的，有接触过一些产品经理要写的文档，所以写的过程中考虑的比较详细，加上有之前入职朋友的提醒，有幸成了极少数能在第一个次审核就通过的。\n3. First assignment implementation，开始用在第一阶段里面复习的语言写第二个阶段设计的程序。捋起袖子，直接开撸。比较集中开始写代码是从大二的暑假开始，假期的实习用 Ruby on Rails 写全栈，前端用的 `JQuery`，半知不解的边查边写完成了任务；IS3102 用的是 Primefaces，集成好了的包，除了极个别，不用直接使用到 `JavaScript` 和 `JQuery`，在以色列实习时，基本都是用 python 写后端。零零总总的经历，虽然用过一点，自己也看了一些这方面的材料，但没有大规模的用 `JavaScript` 和 `JQuery` 写过，直接开撸的后果就是，不熟悉代码组织的模式，在尽量的保持不重复代码，分成了好几个文件来写（和其他人一个文件几百行相比）的情况下，代码越写，越是乱成了一锅粥，也没有停下来好好想想，怎么做比较好，写了一个多星期，差不多把系统的初始版本都写完了，边写边踩坑，进度还算可以。提交审核，整体上没有大问题，但一些之前没有提到的细节上，需要做一些修改，比如：表格没有验证输入内容，表格没有分页和搜索等。\n4. First assignment implementation improvement，在原来的基础上，简单的加上要求的新功能，可能最多3天就能够写完，却是不能忍受乱成一团的代码，在 Udacity 上看完 Product Design 的课后，正好看到了 JavaScript Design Pattern。花了一天的时间，紧凑的看完了视频，跳过了用 KnockoutJS 那部分，觉得之前试的那种模式已经够用了，就开始重构原来的代码。这个的模式大概是这样的\n\t```\n\t$(function() {\n\t    var model = {\n\t\t    init: function() {}\n\t    };\n\n\t    var controller = {\n\t        init: function() {\n\t\t        model.init();\n\t            view.init();\n\t        }\n\t    };\n\t    \n\t    var view = {\n\t        init: function() {}\n\t    };\n\t    controller.init();\n\t}()); \n\t```\n    本来以为是个不错的模式了了，一个页面，放一堆的这些东西，但是在写下一个页面要用到这个页面里面的函数时，麻烦就出现了，没法使用到，只能用 `window.modules = {}` 这个方法，先将这部分的代码存到 module 里面，再到另外一个页面去引用，显然，不合理。不经意和同期的越南小哥聊天时，讨论了下代码，他用的是 MVC 模式，恍然大悟，这不就是和 `Ruby on Rails` 组织代码的模式一摸一样吗。。。本来想跳过的那本书 *JavaScript Design Patter* 还是得硬着头皮翻一遍。第二天，就开始按照 MVC 的机构将之前写的所有代码全部重构，加上新的功能，又写了一个多星期。不过以这种模式来组织代码，清晰明了，重复利用率高，维护和修改也比之前来的容易的多。\n\n\t然而，这个坑，还不能说完全跨过了这个坑。将这个页面作为一个 View 的方式还是不够模块化，一个长得一样的 List 或者完全相同功能的 分页功能 要在多个页面使用时，就让我意识到，在动手写代码之前，没有好好设计，会碰到一些早就改先想清楚的问题，比如说一个模块被多次重复使用时，每次使用都有一些特殊的使用方式，要如何处理。写完后改代码的质量和效率，远低于设计好再开始写的质量。深刻体会到了《构建之法》中提到的那点，**有经验的程序员，前期设计和思考的时间长，真正开发时用的时间反而比较短。** ![Alt text](./大四学生和三年工作经验的开发人员用时对比.PNG) (Senior Student： 大四学生；SDE：工作三年以上程序员)\n\n写了一个月代码，整体感觉还是有点疲惫和乏味，一直都在不断的学习新的内容，而且都是实打实的进步，但是要学要掌握的东西还是太多，不是 CS 专业毕业的码农，还是有些劣势的。\n\n下个月，每天进行一个新加点技能的总结，积累和沉淀写东西。\n\n","source":"_posts/三月码代码总结.md","raw":"---\ntitle: 三月码代码总结\ndate: 2017-04-05 21:26:09\ntags:\n---\n从3月1日开始工作，到上周周五，第一份工作的第一个月在码代码的过程中完美度过。一个比较大的不足就是没有**每天写总结**，虽然公司有一个每天要写的 daily report，但基本是简单记录了一天里做了的事情，而不是做完这些事之后的心得体会，**没有深入反思，也就没有深刻的印象**。在这月终，必须对上个月进行一个整体的总结。\n\n这个月主要分成四个阶段：\n1.  Catch up assignment，主要是 `HTML & CSS`, `SQL`, `JavaScript`, `JQuery` 的练习，大部分是之前比较熟悉的内容，用了一天半，完成任务。\n2.  First assignment catalog，这是我们公司软件开发很重视的一点，用 catalog 的形式，思考设计好要软件，再进行开发。主要是从这几个方面去阐述：\n\t* 商业运作的场景\n\t* 运作过程中会碰到的问题\n\t* 用户名片（具体的中文名叫什么来着？）：\n\t\t* 用户是谁？\n\t\t* 用户完成任务的场景\n\t\t* 用户要完成什么任务？\n\t\t* 用户完成这项任务的期待是什么样的？\n\t\t* 这个软件能够如何帮助用户完成任务？\n\t* 在使用软件的理想情况下，商业运作的场景会是什么样的？\n\t* 软件有哪些功能？\n\t* 软件能带来哪些好处？\n\t* 针对每个好处罗列具体的功能，以及每个功能所能带来的好处。\n\t\n\t这部分的内容，有点像是之前 IS3102 Enterprise Systems Development Project 要求写的 report 的一部分内容，但是像是**产品经理做的用户需求分析**，一直对产品经理很感兴趣的，有接触过一些产品经理要写的文档，所以写的过程中考虑的比较详细，加上有之前入职朋友的提醒，有幸成了极少数能在第一个次审核就通过的。\n3. First assignment implementation，开始用在第一阶段里面复习的语言写第二个阶段设计的程序。捋起袖子，直接开撸。比较集中开始写代码是从大二的暑假开始，假期的实习用 Ruby on Rails 写全栈，前端用的 `JQuery`，半知不解的边查边写完成了任务；IS3102 用的是 Primefaces，集成好了的包，除了极个别，不用直接使用到 `JavaScript` 和 `JQuery`，在以色列实习时，基本都是用 python 写后端。零零总总的经历，虽然用过一点，自己也看了一些这方面的材料，但没有大规模的用 `JavaScript` 和 `JQuery` 写过，直接开撸的后果就是，不熟悉代码组织的模式，在尽量的保持不重复代码，分成了好几个文件来写（和其他人一个文件几百行相比）的情况下，代码越写，越是乱成了一锅粥，也没有停下来好好想想，怎么做比较好，写了一个多星期，差不多把系统的初始版本都写完了，边写边踩坑，进度还算可以。提交审核，整体上没有大问题，但一些之前没有提到的细节上，需要做一些修改，比如：表格没有验证输入内容，表格没有分页和搜索等。\n4. First assignment implementation improvement，在原来的基础上，简单的加上要求的新功能，可能最多3天就能够写完，却是不能忍受乱成一团的代码，在 Udacity 上看完 Product Design 的课后，正好看到了 JavaScript Design Pattern。花了一天的时间，紧凑的看完了视频，跳过了用 KnockoutJS 那部分，觉得之前试的那种模式已经够用了，就开始重构原来的代码。这个的模式大概是这样的\n\t```\n\t$(function() {\n\t    var model = {\n\t\t    init: function() {}\n\t    };\n\n\t    var controller = {\n\t        init: function() {\n\t\t        model.init();\n\t            view.init();\n\t        }\n\t    };\n\t    \n\t    var view = {\n\t        init: function() {}\n\t    };\n\t    controller.init();\n\t}()); \n\t```\n    本来以为是个不错的模式了了，一个页面，放一堆的这些东西，但是在写下一个页面要用到这个页面里面的函数时，麻烦就出现了，没法使用到，只能用 `window.modules = {}` 这个方法，先将这部分的代码存到 module 里面，再到另外一个页面去引用，显然，不合理。不经意和同期的越南小哥聊天时，讨论了下代码，他用的是 MVC 模式，恍然大悟，这不就是和 `Ruby on Rails` 组织代码的模式一摸一样吗。。。本来想跳过的那本书 *JavaScript Design Patter* 还是得硬着头皮翻一遍。第二天，就开始按照 MVC 的机构将之前写的所有代码全部重构，加上新的功能，又写了一个多星期。不过以这种模式来组织代码，清晰明了，重复利用率高，维护和修改也比之前来的容易的多。\n\n\t然而，这个坑，还不能说完全跨过了这个坑。将这个页面作为一个 View 的方式还是不够模块化，一个长得一样的 List 或者完全相同功能的 分页功能 要在多个页面使用时，就让我意识到，在动手写代码之前，没有好好设计，会碰到一些早就改先想清楚的问题，比如说一个模块被多次重复使用时，每次使用都有一些特殊的使用方式，要如何处理。写完后改代码的质量和效率，远低于设计好再开始写的质量。深刻体会到了《构建之法》中提到的那点，**有经验的程序员，前期设计和思考的时间长，真正开发时用的时间反而比较短。** ![Alt text](./大四学生和三年工作经验的开发人员用时对比.PNG) (Senior Student： 大四学生；SDE：工作三年以上程序员)\n\n写了一个月代码，整体感觉还是有点疲惫和乏味，一直都在不断的学习新的内容，而且都是实打实的进步，但是要学要掌握的东西还是太多，不是 CS 专业毕业的码农，还是有些劣势的。\n\n下个月，每天进行一个新加点技能的总结，积累和沉淀写东西。\n\n","slug":"三月码代码总结","published":1,"updated":"2017-04-05T14:09:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj19i7ipm0002ezy9e7f722h0","content":"<p>从3月1日开始工作，到上周周五，第一份工作的第一个月在码代码的过程中完美度过。一个比较大的不足就是没有<strong>每天写总结</strong>，虽然公司有一个每天要写的 daily report，但基本是简单记录了一天里做了的事情，而不是做完这些事之后的心得体会，<strong>没有深入反思，也就没有深刻的印象</strong>。在这月终，必须对上个月进行一个整体的总结。</p>\n<p>这个月主要分成四个阶段：</p>\n<ol>\n<li>Catch up assignment，主要是 <code>HTML &amp; CSS</code>, <code>SQL</code>, <code>JavaScript</code>, <code>JQuery</code> 的练习，大部分是之前比较熟悉的内容，用了一天半，完成任务。</li>\n<li><p>First assignment catalog，这是我们公司软件开发很重视的一点，用 catalog 的形式，思考设计好要软件，再进行开发。主要是从这几个方面去阐述：</p>\n<ul>\n<li>商业运作的场景</li>\n<li>运作过程中会碰到的问题</li>\n<li>用户名片（具体的中文名叫什么来着？）：<ul>\n<li>用户是谁？</li>\n<li>用户完成任务的场景</li>\n<li>用户要完成什么任务？</li>\n<li>用户完成这项任务的期待是什么样的？</li>\n<li>这个软件能够如何帮助用户完成任务？</li>\n</ul>\n</li>\n<li>在使用软件的理想情况下，商业运作的场景会是什么样的？</li>\n<li>软件有哪些功能？</li>\n<li>软件能带来哪些好处？</li>\n<li>针对每个好处罗列具体的功能，以及每个功能所能带来的好处。</li>\n</ul>\n<p>这部分的内容，有点像是之前 IS3102 Enterprise Systems Development Project 要求写的 report 的一部分内容，但是像是<strong>产品经理做的用户需求分析</strong>，一直对产品经理很感兴趣的，有接触过一些产品经理要写的文档，所以写的过程中考虑的比较详细，加上有之前入职朋友的提醒，有幸成了极少数能在第一个次审核就通过的。</p>\n</li>\n<li>First assignment implementation，开始用在第一阶段里面复习的语言写第二个阶段设计的程序。捋起袖子，直接开撸。比较集中开始写代码是从大二的暑假开始，假期的实习用 Ruby on Rails 写全栈，前端用的 <code>JQuery</code>，半知不解的边查边写完成了任务；IS3102 用的是 Primefaces，集成好了的包，除了极个别，不用直接使用到 <code>JavaScript</code> 和 <code>JQuery</code>，在以色列实习时，基本都是用 python 写后端。零零总总的经历，虽然用过一点，自己也看了一些这方面的材料，但没有大规模的用 <code>JavaScript</code> 和 <code>JQuery</code> 写过，直接开撸的后果就是，不熟悉代码组织的模式，在尽量的保持不重复代码，分成了好几个文件来写（和其他人一个文件几百行相比）的情况下，代码越写，越是乱成了一锅粥，也没有停下来好好想想，怎么做比较好，写了一个多星期，差不多把系统的初始版本都写完了，边写边踩坑，进度还算可以。提交审核，整体上没有大问题，但一些之前没有提到的细节上，需要做一些修改，比如：表格没有验证输入内容，表格没有分页和搜索等。</li>\n<li><p>First assignment implementation improvement，在原来的基础上，简单的加上要求的新功能，可能最多3天就能够写完，却是不能忍受乱成一团的代码，在 Udacity 上看完 Product Design 的课后，正好看到了 JavaScript Design Pattern。花了一天的时间，紧凑的看完了视频，跳过了用 KnockoutJS 那部分，觉得之前试的那种模式已经够用了，就开始重构原来的代码。这个的模式大概是这样的</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(function() &#123;</div><div class=\"line\">    var model = &#123;</div><div class=\"line\">\t    init: function() &#123;&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    var controller = &#123;</div><div class=\"line\">        init: function() &#123;</div><div class=\"line\">\t        model.init();</div><div class=\"line\">            view.init();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    var view = &#123;</div><div class=\"line\">        init: function() &#123;&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    controller.init();</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p> 本来以为是个不错的模式了了，一个页面，放一堆的这些东西，但是在写下一个页面要用到这个页面里面的函数时，麻烦就出现了，没法使用到，只能用 <code>window.modules = {}</code> 这个方法，先将这部分的代码存到 module 里面，再到另外一个页面去引用，显然，不合理。不经意和同期的越南小哥聊天时，讨论了下代码，他用的是 MVC 模式，恍然大悟，这不就是和 <code>Ruby on Rails</code> 组织代码的模式一摸一样吗。。。本来想跳过的那本书 <em>JavaScript Design Patter</em> 还是得硬着头皮翻一遍。第二天，就开始按照 MVC 的机构将之前写的所有代码全部重构，加上新的功能，又写了一个多星期。不过以这种模式来组织代码，清晰明了，重复利用率高，维护和修改也比之前来的容易的多。</p>\n<p> 然而，这个坑，还不能说完全跨过了这个坑。将这个页面作为一个 View 的方式还是不够模块化，一个长得一样的 List 或者完全相同功能的 分页功能 要在多个页面使用时，就让我意识到，在动手写代码之前，没有好好设计，会碰到一些早就改先想清楚的问题，比如说一个模块被多次重复使用时，每次使用都有一些特殊的使用方式，要如何处理。写完后改代码的质量和效率，远低于设计好再开始写的质量。深刻体会到了《构建之法》中提到的那点，<strong>有经验的程序员，前期设计和思考的时间长，真正开发时用的时间反而比较短。</strong> <img src=\"./大四学生和三年工作经验的开发人员用时对比.PNG\" alt=\"Alt text\"> (Senior Student： 大四学生；SDE：工作三年以上程序员)</p>\n</li>\n</ol>\n<p>写了一个月代码，整体感觉还是有点疲惫和乏味，一直都在不断的学习新的内容，而且都是实打实的进步，但是要学要掌握的东西还是太多，不是 CS 专业毕业的码农，还是有些劣势的。</p>\n<p>下个月，每天进行一个新加点技能的总结，积累和沉淀写东西。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从3月1日开始工作，到上周周五，第一份工作的第一个月在码代码的过程中完美度过。一个比较大的不足就是没有<strong>每天写总结</strong>，虽然公司有一个每天要写的 daily report，但基本是简单记录了一天里做了的事情，而不是做完这些事之后的心得体会，<strong>没有深入反思，也就没有深刻的印象</strong>。在这月终，必须对上个月进行一个整体的总结。</p>\n<p>这个月主要分成四个阶段：</p>\n<ol>\n<li>Catch up assignment，主要是 <code>HTML &amp; CSS</code>, <code>SQL</code>, <code>JavaScript</code>, <code>JQuery</code> 的练习，大部分是之前比较熟悉的内容，用了一天半，完成任务。</li>\n<li><p>First assignment catalog，这是我们公司软件开发很重视的一点，用 catalog 的形式，思考设计好要软件，再进行开发。主要是从这几个方面去阐述：</p>\n<ul>\n<li>商业运作的场景</li>\n<li>运作过程中会碰到的问题</li>\n<li>用户名片（具体的中文名叫什么来着？）：<ul>\n<li>用户是谁？</li>\n<li>用户完成任务的场景</li>\n<li>用户要完成什么任务？</li>\n<li>用户完成这项任务的期待是什么样的？</li>\n<li>这个软件能够如何帮助用户完成任务？</li>\n</ul>\n</li>\n<li>在使用软件的理想情况下，商业运作的场景会是什么样的？</li>\n<li>软件有哪些功能？</li>\n<li>软件能带来哪些好处？</li>\n<li>针对每个好处罗列具体的功能，以及每个功能所能带来的好处。</li>\n</ul>\n<p>这部分的内容，有点像是之前 IS3102 Enterprise Systems Development Project 要求写的 report 的一部分内容，但是像是<strong>产品经理做的用户需求分析</strong>，一直对产品经理很感兴趣的，有接触过一些产品经理要写的文档，所以写的过程中考虑的比较详细，加上有之前入职朋友的提醒，有幸成了极少数能在第一个次审核就通过的。</p>\n</li>\n<li>First assignment implementation，开始用在第一阶段里面复习的语言写第二个阶段设计的程序。捋起袖子，直接开撸。比较集中开始写代码是从大二的暑假开始，假期的实习用 Ruby on Rails 写全栈，前端用的 <code>JQuery</code>，半知不解的边查边写完成了任务；IS3102 用的是 Primefaces，集成好了的包，除了极个别，不用直接使用到 <code>JavaScript</code> 和 <code>JQuery</code>，在以色列实习时，基本都是用 python 写后端。零零总总的经历，虽然用过一点，自己也看了一些这方面的材料，但没有大规模的用 <code>JavaScript</code> 和 <code>JQuery</code> 写过，直接开撸的后果就是，不熟悉代码组织的模式，在尽量的保持不重复代码，分成了好几个文件来写（和其他人一个文件几百行相比）的情况下，代码越写，越是乱成了一锅粥，也没有停下来好好想想，怎么做比较好，写了一个多星期，差不多把系统的初始版本都写完了，边写边踩坑，进度还算可以。提交审核，整体上没有大问题，但一些之前没有提到的细节上，需要做一些修改，比如：表格没有验证输入内容，表格没有分页和搜索等。</li>\n<li><p>First assignment implementation improvement，在原来的基础上，简单的加上要求的新功能，可能最多3天就能够写完，却是不能忍受乱成一团的代码，在 Udacity 上看完 Product Design 的课后，正好看到了 JavaScript Design Pattern。花了一天的时间，紧凑的看完了视频，跳过了用 KnockoutJS 那部分，觉得之前试的那种模式已经够用了，就开始重构原来的代码。这个的模式大概是这样的</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(function() &#123;</div><div class=\"line\">    var model = &#123;</div><div class=\"line\">\t    init: function() &#123;&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    var controller = &#123;</div><div class=\"line\">        init: function() &#123;</div><div class=\"line\">\t        model.init();</div><div class=\"line\">            view.init();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    var view = &#123;</div><div class=\"line\">        init: function() &#123;&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    controller.init();</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p> 本来以为是个不错的模式了了，一个页面，放一堆的这些东西，但是在写下一个页面要用到这个页面里面的函数时，麻烦就出现了，没法使用到，只能用 <code>window.modules = {}</code> 这个方法，先将这部分的代码存到 module 里面，再到另外一个页面去引用，显然，不合理。不经意和同期的越南小哥聊天时，讨论了下代码，他用的是 MVC 模式，恍然大悟，这不就是和 <code>Ruby on Rails</code> 组织代码的模式一摸一样吗。。。本来想跳过的那本书 <em>JavaScript Design Patter</em> 还是得硬着头皮翻一遍。第二天，就开始按照 MVC 的机构将之前写的所有代码全部重构，加上新的功能，又写了一个多星期。不过以这种模式来组织代码，清晰明了，重复利用率高，维护和修改也比之前来的容易的多。</p>\n<p> 然而，这个坑，还不能说完全跨过了这个坑。将这个页面作为一个 View 的方式还是不够模块化，一个长得一样的 List 或者完全相同功能的 分页功能 要在多个页面使用时，就让我意识到，在动手写代码之前，没有好好设计，会碰到一些早就改先想清楚的问题，比如说一个模块被多次重复使用时，每次使用都有一些特殊的使用方式，要如何处理。写完后改代码的质量和效率，远低于设计好再开始写的质量。深刻体会到了《构建之法》中提到的那点，<strong>有经验的程序员，前期设计和思考的时间长，真正开发时用的时间反而比较短。</strong> <img src=\"./大四学生和三年工作经验的开发人员用时对比.PNG\" alt=\"Alt text\"> (Senior Student： 大四学生；SDE：工作三年以上程序员)</p>\n</li>\n</ol>\n<p>写了一个月代码，整体感觉还是有点疲惫和乏味，一直都在不断的学习新的内容，而且都是实打实的进步，但是要学要掌握的东西还是太多，不是 CS 专业毕业的码农，还是有些劣势的。</p>\n<p>下个月，每天进行一个新加点技能的总结，积累和沉淀写东西。</p>\n"},{"title":"test2016","date":"2016-04-08T17:30:52.000Z","_content":"","source":"_posts/test2016.md","raw":"---\ntitle: test2016\ndate: 2016-04-09 01:30:52\ntags:\n---\n","slug":"test2016","published":1,"updated":"2017-04-08T17:31:05.000Z","_id":"cj19jdtdr0000qcy9kvytepbr","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"test2016-2","date":"2016-04-08T17:31:14.000Z","_content":"","source":"_posts/test2016-2.md","raw":"---\ntitle: test2016-2\ndate: 2016-04-09 01:31:14\ntags:\n---\n","slug":"test2016-2","published":1,"updated":"2017-04-08T17:31:31.000Z","_id":"cj19je9p20001qcy95jprjue6","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}